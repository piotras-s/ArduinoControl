<?php

namespace KGzocha\ArduinoBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Func;

/**
 * ResponseLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResponseLogRepository extends EntityRepository
{

    /**
     * @return mixed
     */
    public function getMeanTime()
    {
        return $this->getSingleScalar($this->createQueryBuilder('rl')->expr()->avg('rl.time'));

    }

    /**
     * @return mixed
     */
    public function getMaxTime()
    {
        return $this->getSingleScalar($this->createQueryBuilder('rl')->expr()->max('rl.time'));
    }

    /**
     * @return mixed
     */
    public function getMaxDate()
    {
        return $this->getSingleScalar($this->createQueryBuilder('rl')->expr()->max('rl.date'));
    }

    /**
     * @return mixed
     */
    public function getMinDate()
    {
        return $this->getSingleScalar($this->createQueryBuilder('rl')->expr()->min('rl.date'));
    }

    /**
     * @return mixed
     */
    public function getMinTime()
    {
        return $this->getSingleScalar($this->createQueryBuilder('rl')->expr()->min('rl.time'));
    }

    /**
     * @return mixed
     */
    public function getNumberOfQueries()
    {
        return $this->getSingleScalar($this->createQueryBuilder('rl')->expr()->count('rl.id'));
    }

    /**
     * @param Func $selectExpression
     * @param int  $cacheTime
     *
     * @return mixed
     */
    protected function getSingleScalar(Func $selectExpression, $cacheTime = 3600)
    {
        return $this->createQueryBuilder('rl')
            ->select($selectExpression)
            ->getQuery()
            ->useResultCache(true, $cacheTime)
            ->getSingleScalarResult();
    }

}
