<?php

namespace KGzocha\ArduinoBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Func;
use KGzocha\ArduinoBundle\Service\Statistics\StatisticableRepositoryInterface;

/**
 * ResponseLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResponseLogRepository extends EntityRepository implements StatisticableRepositoryInterface
{

    /**
     * @return mixed
     */
    public function getMeanTime()
    {
        return $this->getSingleScalar($this->createQueryBuilder('rl')->expr()->avg('rl.time'));

    }

    /**
     * @return mixed
     */
    public function getMaxTime()
    {
        return $this->getSingleScalar($this->createQueryBuilder('rl')->expr()->max('rl.time'));
    }

    /**
     * @return mixed
     */
    public function getMaxDate()
    {
        return $this->getSingleScalar($this->createQueryBuilder('rl')->expr()->max('rl.date'));
    }

    /**
     * @return mixed
     */
    public function getMinDate()
    {
        return $this->getSingleScalar($this->createQueryBuilder('rl')->expr()->min('rl.date'));
    }

    /**
     * @return mixed
     */
    public function getMinTime()
    {
        return $this->getSingleScalar($this->createQueryBuilder('rl')->expr()->min('rl.time'));
    }

    /**
     * @return mixed
     */
    public function getNumberOfQueries()
    {
        return $this->getSingleScalar($this->createQueryBuilder('rl')->expr()->count('rl.id'));
    }

    /**
     * Will return X and Y values
     *
     * @param int       $id
     * @param \DateTime $dateFrom
     * @param \DateTime $dateTo
     *
     * @return mixed
     */
    public function getValues($id, \DateTime $dateFrom = null, \DateTime $dateTo = null)
    {
        $query = $this->createQueryBuilder('rl')
            ->select('rl.time as y')
            ->addSelect('rl.date as x');

        if ($dateFrom) {
            $query->andWhere('rl.date >= :dateFrom');
            $query->setParameter(':dateFrom', $dateFrom->format('Y-m-d 00:00:00'));
        }

        if ($dateTo) {
            $query->andWhere('rl.date <= :dateTo');
            $query->setParameter(':dateTo', $dateTo->format('Y-m-d 23:59:59'));
        }

        return $query
            ->getQuery()
            ->useResultCache(true, 60)
            ->getArrayResult();
    }

    /**
     * @param Func $selectExpression
     * @param int  $cacheTime
     *
     * @return mixed
     */
    protected function getSingleScalar(Func $selectExpression, $cacheTime = 3600)
    {
        return $this->createQueryBuilder('rl')
            ->select($selectExpression)
            ->getQuery()
            ->useResultCache(true, $cacheTime)
            ->getSingleScalarResult();
    }

}
